<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Weishan He</title><link>http://weishanhe.github.io/</link><description>Recent content on Weishan He</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 29 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="http://weishanhe.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Bayesian A/B Testing</title><link>http://weishanhe.github.io/blogs/bayesian_ab_testing/</link><pubDate>Mon, 29 May 2023 00:00:00 +0000</pubDate><guid>http://weishanhe.github.io/blogs/bayesian_ab_testing/</guid><description>During my time as a Data Scientist at Andela, I had the opportunity to explore the realm of Bayesian A/B testing, an approach renowned for its robust performance in small sample sizes. Like many others, my introduction to experimentation was through Frequentist A/B testing. As I familiarized myself with concepts like p-values and statistical power, it took some time for me to streamline the bayesian framework of conducting experiments. In this article, I aim to guide you through the essential process of Bayesian A/B testing using an example along with some practical codes.</description></item><item><title/><link>http://weishanhe.github.io/resume/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://weishanhe.github.io/resume/</guid><description>Weishan He Technical Skills Computer Languages: Python (PyTorch, Pandas, Scikit-learn, Seaborn, etc.), SQL, R, Shell Script Tools: Tableau, Looker, Git, Poetry, Docker, Google Cloud Platform, AWS, Hadoop/PySpark, FastAPI Skills: Causal Inference, Machine Learning, Deep Learning, Data ETL, Data Visualization PROFESSIONAL EXPERIENCE Data Scientist
Andela @ USA &amp;ndash; Aug. 2022 to Apr. 2023 Spearheaded experimentation, utilizing Frequentist and Bayesian approaches to design and analyze impactful A/B testing, achieving a 30% increase in the sign-up rate Pioneered a recommendation engine using tree-based machine learning models and NLP to automate 30% of hiring events, reducing time-to-hire by 20% Engineered data pipeline using Python and SQL to query, validate, convert, and calculate features in batch, reducing preprocessing time by 40% Revamped training pipeline for diverse models, feature selection, calibration, and continuous updates, cutting training time by 50% Leveraged Poetry and Git to establish and maintain mono-repo with self-developed packages, mitigating code duplication by 40% across multiple projects Implemented a Docker container, API, and Git Tag to seamlessly deliver the model to the engineering team Created Looker dashboards to monitor key metrics of recommendation engine, demonstrating parity with human recruiters in converting talent profile views to scheduling interview Data Analyst (Practicum)</description></item></channel></rss>